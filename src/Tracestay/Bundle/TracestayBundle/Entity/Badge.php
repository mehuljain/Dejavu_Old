<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-annotation) on 2015-05-12 13:31:19.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * Entity\Badge
 *
 * @ORM\Entity(repositoryClass="BadgeRepository")
 * @ORM\Table(name="badge")
 */
class Badge
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     */
    protected $id;

    /**
     * @ORM\Column(type="integer")
     */
    protected $nBadgeValue;

    /**
     * @ORM\OneToMany(targetEntity="PropertyHasBadge", mappedBy="badge")
     * @ORM\JoinColumn(name="id", referencedColumnName="badgeId")
     */
    protected $propertyHasBadges;

    public function __construct()
    {
        $this->propertyHasBadges = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Entity\Badge
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of nBadgeValue.
     *
     * @param integer $nBadgeValue
     * @return \Entity\Badge
     */
    public function setNBadgeValue($nBadgeValue)
    {
        $this->nBadgeValue = $nBadgeValue;

        return $this;
    }

    /**
     * Get the value of nBadgeValue.
     *
     * @return integer
     */
    public function getNBadgeValue()
    {
        return $this->nBadgeValue;
    }

    /**
     * Add PropertyHasBadge entity to collection (one to many).
     *
     * @param \Entity\PropertyHasBadge $propertyHasBadge
     * @return \Entity\Badge
     */
    public function addPropertyHasBadge(PropertyHasBadge $propertyHasBadge)
    {
        $this->propertyHasBadges[] = $propertyHasBadge;

        return $this;
    }

    /**
     * Remove PropertyHasBadge entity from collection (one to many).
     *
     * @param \Entity\PropertyHasBadge $propertyHasBadge
     * @return \Entity\Badge
     */
    public function removePropertyHasBadge(PropertyHasBadge $propertyHasBadge)
    {
        $this->propertyHasBadges->removeElement($propertyHasBadge);

        return $this;
    }

    /**
     * Get PropertyHasBadge entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPropertyHasBadges()
    {
        return $this->propertyHasBadges;
    }

    public function __sleep()
    {
        return array('id', 'nBadgeValue');
    }
}