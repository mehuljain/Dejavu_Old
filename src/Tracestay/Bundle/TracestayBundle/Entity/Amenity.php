<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-annotation) on 2015-05-12 13:31:19.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * Entity\Amenity
 *
 * @ORM\Entity(repositoryClass="AmenityRepository")
 * @ORM\Table(name="amenity")
 */
class Amenity
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     */
    protected $id;

    /**
     * @ORM\Column(type="integer")
     */
    protected $nAmenity;

    /**
     * @ORM\OneToMany(targetEntity="PropertyHasAmenity", mappedBy="amenity")
     * @ORM\JoinColumn(name="id", referencedColumnName="amenityId")
     */
    protected $propertyHasAmenities;

    public function __construct()
    {
        $this->propertyHasAmenities = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Entity\Amenity
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of nAmenity.
     *
     * @param integer $nAmenity
     * @return \Entity\Amenity
     */
    public function setNAmenity($nAmenity)
    {
        $this->nAmenity = $nAmenity;

        return $this;
    }

    /**
     * Get the value of nAmenity.
     *
     * @return integer
     */
    public function getNAmenity()
    {
        return $this->nAmenity;
    }

    /**
     * Add PropertyHasAmenity entity to collection (one to many).
     *
     * @param \Entity\PropertyHasAmenity $propertyHasAmenity
     * @return \Entity\Amenity
     */
    public function addPropertyHasAmenity(PropertyHasAmenity $propertyHasAmenity)
    {
        $this->propertyHasAmenities[] = $propertyHasAmenity;

        return $this;
    }

    /**
     * Remove PropertyHasAmenity entity from collection (one to many).
     *
     * @param \Entity\PropertyHasAmenity $propertyHasAmenity
     * @return \Entity\Amenity
     */
    public function removePropertyHasAmenity(PropertyHasAmenity $propertyHasAmenity)
    {
        $this->propertyHasAmenities->removeElement($propertyHasAmenity);

        return $this;
    }

    /**
     * Get PropertyHasAmenity entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPropertyHasAmenities()
    {
        return $this->propertyHasAmenities;
    }

    public function __sleep()
    {
        return array('id', 'nAmenity');
    }
}