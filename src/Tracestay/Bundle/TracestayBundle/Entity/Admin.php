<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-annotation) on 2015-05-12 15:16:43.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * Entity\Admin
 *
 * @ORM\Entity(repositoryClass="AdminRepository")
 * @ORM\Table(name="`admin`", indexes={@ORM\Index(name="fk_admin_university1_idx", columns={"university_id"})})
 */
class Admin
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     */
    protected $id;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     */
    protected $university_id;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $username;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $username_canonical;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $tAdminDesignation;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $nPermissionLevel;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $email;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $email_canonical;

    /**
     * @ORM\Column(type="boolean", nullable=true)
     */
    protected $enabled;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $salt;

    /**
     * @ORM\Column(name="`password`", type="string", length=255, nullable=true)
     */
    protected $password;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $last_login;

    /**
     * @ORM\Column(type="boolean", nullable=true)
     */
    protected $locked;

    /**
     * @ORM\Column(type="boolean", nullable=true)
     */
    protected $expired;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $expires_at;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $confirmation_token;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $password_requested_at;

    /**
     * @ORM\Column(type="text", nullable=true)
     */
    protected $roles;

    /**
     * @ORM\Column(type="boolean", nullable=true)
     */
    protected $credentials_expired;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $credentials_expire_at;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $dCreatedAt;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $dUpdatedAt;

    /**
     * @ORM\ManyToOne(targetEntity="University", inversedBy="admins")
     * @ORM\JoinColumn(name="university_id", referencedColumnName="id")
     */
    protected $university;

    public function __construct()
    {
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Entity\Admin
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of university_id.
     *
     * @param integer $university_id
     * @return \Entity\Admin
     */
    public function setUniversityId($university_id)
    {
        $this->university_id = $university_id;

        return $this;
    }

    /**
     * Get the value of university_id.
     *
     * @return integer
     */
    public function getUniversityId()
    {
        return $this->university_id;
    }

    /**
     * Set the value of username.
     *
     * @param string $username
     * @return \Entity\Admin
     */
    public function setUsername($username)
    {
        $this->username = $username;

        return $this;
    }

    /**
     * Get the value of username.
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * Set the value of username_canonical.
     *
     * @param string $username_canonical
     * @return \Entity\Admin
     */
    public function setUsernameCanonical($username_canonical)
    {
        $this->username_canonical = $username_canonical;

        return $this;
    }

    /**
     * Get the value of username_canonical.
     *
     * @return string
     */
    public function getUsernameCanonical()
    {
        return $this->username_canonical;
    }

    /**
     * Set the value of tAdminDesignation.
     *
     * @param string $tAdminDesignation
     * @return \Entity\Admin
     */
    public function setTAdminDesignation($tAdminDesignation)
    {
        $this->tAdminDesignation = $tAdminDesignation;

        return $this;
    }

    /**
     * Get the value of tAdminDesignation.
     *
     * @return string
     */
    public function getTAdminDesignation()
    {
        return $this->tAdminDesignation;
    }

    /**
     * Set the value of nPermissionLevel.
     *
     * @param string $nPermissionLevel
     * @return \Entity\Admin
     */
    public function setNPermissionLevel($nPermissionLevel)
    {
        $this->nPermissionLevel = $nPermissionLevel;

        return $this;
    }

    /**
     * Get the value of nPermissionLevel.
     *
     * @return string
     */
    public function getNPermissionLevel()
    {
        return $this->nPermissionLevel;
    }

    /**
     * Set the value of email.
     *
     * @param string $email
     * @return \Entity\Admin
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get the value of email.
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set the value of email_canonical.
     *
     * @param string $email_canonical
     * @return \Entity\Admin
     */
    public function setEmailCanonical($email_canonical)
    {
        $this->email_canonical = $email_canonical;

        return $this;
    }

    /**
     * Get the value of email_canonical.
     *
     * @return string
     */
    public function getEmailCanonical()
    {
        return $this->email_canonical;
    }

    /**
     * Set the value of enabled.
     *
     * @param boolean $enabled
     * @return \Entity\Admin
     */
    public function setEnabled($enabled)
    {
        $this->enabled = $enabled;

        return $this;
    }

    /**
     * Get the value of enabled.
     *
     * @return boolean
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     * Set the value of salt.
     *
     * @param string $salt
     * @return \Entity\Admin
     */
    public function setSalt($salt)
    {
        $this->salt = $salt;

        return $this;
    }

    /**
     * Get the value of salt.
     *
     * @return string
     */
    public function getSalt()
    {
        return $this->salt;
    }

    /**
     * Set the value of password.
     *
     * @param string $password
     * @return \Entity\Admin
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Get the value of password.
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set the value of last_login.
     *
     * @param \DateTime $last_login
     * @return \Entity\Admin
     */
    public function setLastLogin($last_login)
    {
        $this->last_login = $last_login;

        return $this;
    }

    /**
     * Get the value of last_login.
     *
     * @return \DateTime
     */
    public function getLastLogin()
    {
        return $this->last_login;
    }

    /**
     * Set the value of locked.
     *
     * @param boolean $locked
     * @return \Entity\Admin
     */
    public function setLocked($locked)
    {
        $this->locked = $locked;

        return $this;
    }

    /**
     * Get the value of locked.
     *
     * @return boolean
     */
    public function getLocked()
    {
        return $this->locked;
    }

    /**
     * Set the value of expired.
     *
     * @param boolean $expired
     * @return \Entity\Admin
     */
    public function setExpired($expired)
    {
        $this->expired = $expired;

        return $this;
    }

    /**
     * Get the value of expired.
     *
     * @return boolean
     */
    public function getExpired()
    {
        return $this->expired;
    }

    /**
     * Set the value of expires_at.
     *
     * @param \DateTime $expires_at
     * @return \Entity\Admin
     */
    public function setExpiresAt($expires_at)
    {
        $this->expires_at = $expires_at;

        return $this;
    }

    /**
     * Get the value of expires_at.
     *
     * @return \DateTime
     */
    public function getExpiresAt()
    {
        return $this->expires_at;
    }

    /**
     * Set the value of confirmation_token.
     *
     * @param string $confirmation_token
     * @return \Entity\Admin
     */
    public function setConfirmationToken($confirmation_token)
    {
        $this->confirmation_token = $confirmation_token;

        return $this;
    }

    /**
     * Get the value of confirmation_token.
     *
     * @return string
     */
    public function getConfirmationToken()
    {
        return $this->confirmation_token;
    }

    /**
     * Set the value of password_requested_at.
     *
     * @param \DateTime $password_requested_at
     * @return \Entity\Admin
     */
    public function setPasswordRequestedAt($password_requested_at)
    {
        $this->password_requested_at = $password_requested_at;

        return $this;
    }

    /**
     * Get the value of password_requested_at.
     *
     * @return \DateTime
     */
    public function getPasswordRequestedAt()
    {
        return $this->password_requested_at;
    }

    /**
     * Set the value of roles.
     *
     * @param string $roles
     * @return \Entity\Admin
     */
    public function setRoles($roles)
    {
        $this->roles = $roles;

        return $this;
    }

    /**
     * Get the value of roles.
     *
     * @return string
     */
    public function getRoles()
    {
        return $this->roles;
    }

    /**
     * Set the value of credentials_expired.
     *
     * @param boolean $credentials_expired
     * @return \Entity\Admin
     */
    public function setCredentialsExpired($credentials_expired)
    {
        $this->credentials_expired = $credentials_expired;

        return $this;
    }

    /**
     * Get the value of credentials_expired.
     *
     * @return boolean
     */
    public function getCredentialsExpired()
    {
        return $this->credentials_expired;
    }

    /**
     * Set the value of credentials_expire_at.
     *
     * @param \DateTime $credentials_expire_at
     * @return \Entity\Admin
     */
    public function setCredentialsExpireAt($credentials_expire_at)
    {
        $this->credentials_expire_at = $credentials_expire_at;

        return $this;
    }

    /**
     * Get the value of credentials_expire_at.
     *
     * @return \DateTime
     */
    public function getCredentialsExpireAt()
    {
        return $this->credentials_expire_at;
    }

    /**
     * Set the value of dCreatedAt.
     *
     * @param \DateTime $dCreatedAt
     * @return \Entity\Admin
     */
    public function setDCreatedAt($dCreatedAt)
    {
        $this->dCreatedAt = $dCreatedAt;

        return $this;
    }

    /**
     * Get the value of dCreatedAt.
     *
     * @return \DateTime
     */
    public function getDCreatedAt()
    {
        return $this->dCreatedAt;
    }

    /**
     * Set the value of dUpdatedAt.
     *
     * @param \DateTime $dUpdatedAt
     * @return \Entity\Admin
     */
    public function setDUpdatedAt($dUpdatedAt)
    {
        $this->dUpdatedAt = $dUpdatedAt;

        return $this;
    }

    /**
     * Get the value of dUpdatedAt.
     *
     * @return \DateTime
     */
    public function getDUpdatedAt()
    {
        return $this->dUpdatedAt;
    }

    /**
     * Set University entity (many to one).
     *
     * @param \Entity\University $university
     * @return \Entity\Admin
     */
    public function setUniversity(University $university = null)
    {
        $this->university = $university;

        return $this;
    }

    /**
     * Get University entity (many to one).
     *
     * @return \Entity\University
     */
    public function getUniversity()
    {
        return $this->university;
    }

    public function __sleep()
    {
        return array('id', 'university_id', 'username', 'username_canonical', 'tAdminDesignation', 'nPermissionLevel', 'email', 'email_canonical', 'enabled', 'salt', 'password', 'last_login', 'locked', 'expired', 'expires_at', 'confirmation_token', 'password_requested_at', 'roles', 'credentials_expired', 'credentials_expire_at', 'dCreatedAt', 'dUpdatedAt');
    }
}